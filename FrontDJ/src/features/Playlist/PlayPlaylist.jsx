//TO-DO
import { useEffect, useState } from "react"; //hooks from React used for side effects and managing state.
import { useParams } from "react-router-dom"; //hook from react-router-dom that allows to access URL parameters
import { useGetPlaylistQuery } from "./PlaylistSlice"; //custom hook generated by Redux slice for fetching the playlist data from the backend.

export function PlayPlaylist() {
  const { id } = useParams();
  const { data: playlist, error, isLoading } = useGetPlaylistQuery(id);
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);
  const [audio] = useState(new Audio());

  useEffect(() => {
    if (playlist && playlist.tracks.length > 0) {
      audio.src = playlist.tracks[currentTrackIndex].url; // Assume tracks have a 'url' property
      audio.play();
    }

    audio.addEventListener("ended", handleNextTrack);

    return () => {
      audio.removeEventListener("ended", handleNextTrack);
      audio.pause();
      audio.src = ""; // Clear the source
    };
  }, [playlist, currentTrackIndex, audio]);

  const handleNextTrack = () => {
    setCurrentTrackIndex((prevIndex) => {
      const nextIndex = (prevIndex + 1) % playlist.tracks.length; // Loop back to start
      audio.src = playlist.tracks[nextIndex].url;
      audio.play();
      return nextIndex;
    });
  };

  const handlePreviousTrack = () => {
    setCurrentTrackIndex((prevIndex) => {
      const prevTrack =
        (prevIndex - 1 + playlist.tracks.length) % playlist.tracks.length; // Loop back to end
      audio.src = playlist.tracks[prevTrack].url;
      audio.play();
      return prevTrack;
    });
  };

  if (isLoading) return <p>Loading playlist...</p>;
  if (error) return <p>Error loading playlist: {error.message}</p>;

  return (
    <div>
      <h2>Playing Playlist: {playlist.name}</h2>
      <div>
        <h3>Tracks:</h3>
        <ul>
          {playlist.tracks.map((track, index) => (
            <li key={track.id}>
              {track.trackName} - {track.artistName}
              {currentTrackIndex === index && " (Now Playing)"}
            </li>
          ))}
        </ul>
        <button
          onClick={handlePreviousTrack}
          disabled={currentTrackIndex === 0}
        >
          Previous
        </button>
        <button
          onClick={handleNextTrack}
          disabled={currentTrackIndex === playlist.tracks.length - 1}
        >
          Next
        </button>
      </div>
    </div>
  );
}